import { geminiAIService, type GeminiAnalysisRequest } from './GeminiAIService';
import { languageService } from './LanguageService';

export interface DetailedMetrics {
  posture: PostureMetrics;
  gesticulation: GesticulationMetrics;
  facial: FacialMetrics;
  speech: SpeechMetrics;
  engagement: EngagementMetrics;
}

export interface PostureMetrics {
  score: number;
  maxScore: 200;
  spineAlignment: number;
  shoulderSymmetry: number;
  headPosition: number;
  stability: number;
  confidence: number;
  issues: string[];
  recommendations: string[];
  aiRecommendations?: string[];
}

export interface GesticulationMetrics {
  score: number;
  maxScore: 200;
  variety: number;
  frequency: number;
  appropriateness: number;
  expressiveness: number;
  coordination: number;
  gestures: string[];
  recommendations: string[];
  aiRecommendations?: string[];
}

export interface FacialMetrics {
  score: number;
  maxScore: 200;
  expressiveness: number;
  eyeContact: number;
  smileFrequency: number;
  emotionalRange: number;
  authenticity: number;
  expressions: string[];
  recommendations: string[];
  aiRecommendations?: string[];
}

export interface SpeechMetrics {
  score: number;
  maxScore: 200;
  clarity: number;
  pace: number;
  volume: number;
  vocabulary: number;
  grammar: number;
  fillerWords: number;
  transcription: string;
  recommendations: string[];
  aiRecommendations?: string[];
}

export interface EngagementMetrics {
  score: number;
  maxScore: 200;
  attention: number;
  interaction: number;
  energy: number;
  presence: number;
  charisma: number;
  recommendations: string[];
  aiRecommendations?: string[];
}

export interface ComprehensiveAnalysis {
  totalScore: number;
  maxTotalScore: 1000;
  percentage: number;
  grade: string;
  metrics: DetailedMetrics;
  overallFeedback: string;
  priorityAreas: string[];
  strengths: string[];
  improvementPlan: string[];
  aiReport?: {
    professionalReport: any;
    enhancedRecommendations: any;
    motivationalMessage: string;
    nextSteps: string[];
  };
}

class ScoringService {
  async calculateComprehensiveScore(
    poseData: any[],
    gestureData: any[],
    faceData: any[],
    audioData: any,
    videoDuration: number
  ): Promise<ComprehensiveAnalysis> {
    
    const postureMetrics = this.analyzePostureMetrics(poseData, videoDuration);
    const gesticulationMetrics = this.analyzeGesticulationMetrics(gestureData, videoDuration);
    const facialMetrics = this.analyzeFacialMetrics(faceData, videoDuration);
    const speechMetrics = this.analyzeSpeechMetrics(audioData, videoDuration);
    const engagementMetrics = this.analyzeEngagementMetrics(
      poseData, gestureData, faceData, audioData, videoDuration
    );

    const totalScore = 
      postureMetrics.score + 
      gesticulationMetrics.score + 
      facialMetrics.score + 
      speechMetrics.score + 
      engagementMetrics.score;

    const percentage = (totalScore / 1000) * 100;
    const grade = this.calculateGrade(percentage);

    const metrics: DetailedMetrics = {
      posture: postureMetrics,
      gesticulation: gesticulationMetrics,
      facial: facialMetrics,
      speech: speechMetrics,
      engagement: engagementMetrics
    };

    // Generate AI-enhanced analysis
    let aiReport;
    try {
      console.log('ü§ñ Generating AI-enhanced professional report...');
      
      const currentLanguage = languageService.getCurrentLanguage();
      const geminiRequest: GeminiAnalysisRequest = {
        transcription: speechMetrics.transcription,
        videoAnalysis: { poseData, gestureData, faceData, videoDuration },
        audioAnalysis: audioData,
        scoringResults: {
          totalScore,
          percentage,
          grade,
          metrics
        },
        multilingualData: audioData.transcriptionMetadata?.isMultilingual ? {
          detectedLanguages: audioData.transcriptionMetadata.detectedLanguages,
          isMultilingual: audioData.transcriptionMetadata.isMultilingual,
          languageSwitches: audioData.transcriptionMetadata.languageSwitches,
          dominantLanguage: audioData.transcriptionMetadata.detectedLanguages?.[0]?.languageCode
        } : undefined,
        userLanguage: currentLanguage
      };

      aiReport = await geminiAIService.generateProfessionalReport(geminiRequest);
      
      // Enhance metrics with AI recommendations
      await this.enhanceMetricsWithAI(metrics, currentLanguage);
      
      console.log('‚úÖ AI-enhanced analysis completed');
      
    } catch (error) {
      console.error('‚ùå AI analysis failed, using fallback:', error);
      aiReport = undefined;
    }

    return {
      totalScore,
      maxTotalScore: 1000,
      percentage,
      grade,
      metrics,
      overallFeedback: this.generateOverallFeedback(percentage, metrics),
      priorityAreas: this.identifyPriorityAreas(metrics),
      strengths: this.identifyStrengths(metrics),
      improvementPlan: this.generateImprovementPlan(metrics),
      aiReport
    };
  }

  /**
   * Enhances metrics with AI-generated recommendations
   */
  private async enhanceMetricsWithAI(metrics: DetailedMetrics, language: 'ru' | 'kk'): Promise<void> {
    try {
      const enhancementPromises = [
        this.enhanceMetricWithAI('posture', metrics.posture, language),
        this.enhanceMetricWithAI('gesticulation', metrics.gesticulation, language),
        this.enhanceMetricWithAI('facial', metrics.facial, language),
        this.enhanceMetricWithAI('speech', metrics.speech, language),
        this.enhanceMetricWithAI('engagement', metrics.engagement, language)
      ];

      const results = await Promise.allSettled(enhancementPromises);
      
      results.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          const metricNames = ['posture', 'gesticulation', 'facial', 'speech', 'engagement'];
          const metricName = metricNames[index] as keyof DetailedMetrics;
          (metrics[metricName] as any).aiRecommendations = result.value;
        }
      });
      
    } catch (error) {
      console.warn('Failed to enhance metrics with AI:', error);
    }
  }

  /**
   * Enhances a specific metric with AI recommendations
   */
  private async enhanceMetricWithAI(
    metricType: 'posture' | 'gesticulation' | 'facial' | 'speech' | 'engagement',
    metricData: any,
    language: 'ru' | 'kk'
  ): Promise<string[]> {
    try {
      return await geminiAIService.generateEnhancedRecommendations(
        metricType,
        metricData.score,
        metricData.maxScore,
        metricData,
        language
      );
    } catch (error) {
      console.warn(`Failed to enhance ${metricType} with AI:`, error);
      return [];
    }
  }

  private analyzePostureMetrics(poseData: any[], videoDuration: number): PostureMetrics {
    if (poseData.length === 0) {
      return {
        score: 50,
        maxScore: 200,
        spineAlignment: 50,
        shoulderSymmetry: 50,
        headPosition: 50,
        stability: 50,
        confidence: 50,
        issues: ["–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–µ"],
        recommendations: ["–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–º–µ—Ä–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—é —Ñ–∏–≥—É—Ä—É"]
      };
    }

    let spineAlignmentScore = 0;
    let shoulderSymmetryScore = 0;
    let headPositionScore = 0;
    let stabilityScore = 0;
    let confidenceScore = 0;

    const issues: string[] = [];
    let forwardLeanCount = 0;
    let shoulderAsymmetryCount = 0;
    let headTiltCount = 0;
    let movementVariance = 0;

    // –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞
    poseData.forEach((frame, index) => {
      const landmarks = frame.landmarks;
      
      // –ê–Ω–∞–ª–∏–∑ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞
      const nose = landmarks[0];
      const leftShoulder = landmarks[11];
      const rightShoulder = landmarks[12];
      const leftHip = landmarks[23];
      const rightHip = landmarks[24];

      // –¶–µ–Ω—Ç—Ä –ø–ª–µ—á –∏ –±–µ–¥–µ—Ä
      const shoulderCenter = {
        x: (leftShoulder.x + rightShoulder.x) / 2,
        y: (leftShoulder.y + rightShoulder.y) / 2
      };
      const hipCenter = {
        x: (leftHip.x + rightHip.x) / 2,
        y: (leftHip.y + rightHip.y) / 2
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–ª–æ–Ω–∞ –≤–ø–µ—Ä–µ–¥
      if (nose.x < shoulderCenter.x - 0.08) {
        forwardLeanCount++;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ø–ª–µ—á
      const shoulderDiff = Math.abs(leftShoulder.y - rightShoulder.y);
      if (shoulderDiff > 0.04) {
        shoulderAsymmetryCount++;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–ª–æ–Ω–∞ –≥–æ–ª–æ–≤—ã
      const headTilt = Math.abs(nose.x - shoulderCenter.x);
      if (headTilt > 0.06) {
        headTiltCount++;
      }

      // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏)
      if (index > 0) {
        const prevFrame = poseData[index - 1];
        const prevNose = prevFrame.landmarks[0];
        const movement = Math.sqrt(
          Math.pow(nose.x - prevNose.x, 2) + Math.pow(nose.y - prevNose.y, 2)
        );
        movementVariance += movement;
      }
    });

    const frameCount = poseData.length;
    const forwardLeanRatio = forwardLeanCount / frameCount;
    const shoulderAsymmetryRatio = shoulderAsymmetryCount / frameCount;
    const headTiltRatio = headTiltCount / frameCount;
    const avgMovement = movementVariance / (frameCount - 1);

    // –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ (–∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ 40 –±–∞–ª–ª–æ–≤)
    spineAlignmentScore = Math.max(0, 40 - (forwardLeanRatio * 40));
    shoulderSymmetryScore = Math.max(0, 40 - (shoulderAsymmetryRatio * 40));
    headPositionScore = Math.max(0, 40 - (headTiltRatio * 40));
    stabilityScore = Math.max(0, 40 - (avgMovement * 200)); // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    confidenceScore = Math.min(40, (spineAlignmentScore + shoulderSymmetryScore) / 2);

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    if (forwardLeanRatio > 0.3) issues.push("–ß–∞—Å—Ç—ã–µ –Ω–∞–∫–ª–æ–Ω—ã –≤–ø–µ—Ä–µ–¥");
    if (shoulderAsymmetryRatio > 0.2) issues.push("–ê—Å–∏–º–º–µ—Ç—Ä–∏—è –ø–ª–µ—á");
    if (headTiltRatio > 0.25) issues.push("–ù–∞–∫–ª–æ–Ω—ã –≥–æ–ª–æ–≤—ã");
    if (avgMovement > 0.02) issues.push("–ò–∑–±—ã—Ç–æ—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è");

    const totalScore = spineAlignmentScore + shoulderSymmetryScore + headPositionScore + stabilityScore + confidenceScore;

    return {
      score: Math.round(totalScore),
      maxScore: 200,
      spineAlignment: Math.round(spineAlignmentScore),
      shoulderSymmetry: Math.round(shoulderSymmetryScore),
      headPosition: Math.round(headPositionScore),
      stability: Math.round(stabilityScore),
      confidence: Math.round(confidenceScore),
      issues,
      recommendations: this.generatePostureRecommendations(issues, totalScore)
    };
  }

  private analyzeGesticulationMetrics(gestureData: any[], videoDuration: number): GesticulationMetrics {
    if (gestureData.length === 0) {
      return {
        score: 60,
        maxScore: 200,
        variety: 20,
        frequency: 20,
        appropriateness: 20,
        expressiveness: 20,
        coordination: 20,
        gestures: [],
        recommendations: ["–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∂–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"]
      };
    }

    const gestureTypes = new Set<string>();
    const gestureTimestamps: number[] = [];
    let totalGestures = 0;
    let expressiveGestures = 0;
    let appropriateGestures = 0;

    // –ê–Ω–∞–ª–∏–∑ –∂–µ—Å—Ç–æ–≤
    gestureData.forEach(frame => {
      frame.gestures.forEach((handGestures: any[]) => {
        handGestures.forEach((gesture: any) => {
          if (gesture.score > 0.6) {
            gestureTypes.add(gesture.categoryName);
            gestureTimestamps.push(frame.timestamp);
            totalGestures++;

            // –û—Ü–µ–Ω–∫–∞ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (gesture.score > 0.8) expressiveGestures++;

            // –û—Ü–µ–Ω–∫–∞ —É–º–µ—Å—Ç–Ω–æ—Å—Ç–∏
            const appropriateGestures_list = [
              'Open_Palm', 'Pointing_Up', 'Thumb_Up', 'Victory'
            ];
            if (appropriateGestures_list.includes(gesture.categoryName)) {
              appropriateGestures++;
            }
          }
        });
      });
    });

    const gestureVariety = gestureTypes.size;
    const gestureFrequency = totalGestures / videoDuration; // –∂–µ—Å—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
    const expressivenessRatio = totalGestures > 0 ? expressiveGestures / totalGestures : 0;
    const appropriatenessRatio = totalGestures > 0 ? appropriateGestures / totalGestures : 0;

    // –ê–Ω–∞–ª–∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∂–µ—Å—Ç–æ–≤)
    let coordinationScore = 40;
    if (gestureTimestamps.length > 1) {
      const intervals: number[] = [];
      for (let i = 1; i < gestureTimestamps.length; i++) {
        intervals.push(gestureTimestamps[i] - gestureTimestamps[i-1]);
      }
      const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
      const variance = intervals.reduce((sum, interval) => sum + Math.pow(interval - avgInterval, 2), 0) / intervals.length;
      coordinationScore = Math.max(0, 40 - (variance * 10));
    }

    // –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ (–∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ 40 –±–∞–ª–ª–æ–≤)
    const varietyScore = Math.min(40, gestureVariety * 8); // –î–æ 5 —Ç–∏–ø–æ–≤ –∂–µ—Å—Ç–æ–≤
    const frequencyScore = Math.min(40, gestureFrequency * 40); // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ 1 –∂–µ—Å—Ç –≤ —Å–µ–∫—É–Ω–¥—É
    const appropriatenessScore = appropriatenessRatio * 40;
    const expressivenessScore = expressivenessRatio * 40;

    const totalScore = varietyScore + frequencyScore + appropriatenessScore + expressivenessScore + coordinationScore;

    return {
      score: Math.round(totalScore),
      maxScore: 200,
      variety: Math.round(varietyScore),
      frequency: Math.round(frequencyScore),
      appropriateness: Math.round(appropriatenessScore),
      expressiveness: Math.round(expressivenessScore),
      coordination: Math.round(coordinationScore),
      gestures: Array.from(gestureTypes),
      recommendations: this.generateGestureRecommendations(gestureTypes.size, gestureFrequency, totalScore)
    };
  }

  private analyzeFacialMetrics(faceData: any[], videoDuration: number): FacialMetrics {
    if (faceData.length === 0) {
      return {
        score: 50,
        maxScore: 200,
        expressiveness: 20,
        eyeContact: 20,
        smileFrequency: 20,
        emotionalRange: 20,
        authenticity: 20,
        expressions: [],
        recommendations: ["–£–ª—É—á—à–∏—Ç–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—Ü–∞"]
      };
    }

    let smileCount = 0;
    let eyeContactCount = 0;
    let expressiveCount = 0;
    let emotionalVariety = new Set<string>();
    let authenticityScore = 0;

    faceData.forEach(frame => {
      if (frame.blendshapes && frame.blendshapes.categories) {
        const blendshapes = frame.blendshapes.categories;
        
        // –ê–Ω–∞–ª–∏–∑ —É–ª—ã–±–∫–∏
        const smileShapes = blendshapes.filter((bs: any) => 
          bs.categoryName.includes('mouthSmile') || 
          bs.categoryName.includes('mouthLeft') || 
          bs.categoryName.includes('mouthRight')
        );
        const maxSmile = Math.max(...smileShapes.map((bs: any) => bs.score), 0);
        if (maxSmile > 0.3) {
          smileCount++;
          emotionalVariety.add('smile');
        }

        // –ê–Ω–∞–ª–∏–∑ –∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        const eyeLookDown = blendshapes.find((bs: any) => bs.categoryName.includes('eyeLookDown'));
        const eyeLookUp = blendshapes.find((bs: any) => bs.categoryName.includes('eyeLookUp'));
        const eyeLookLeft = blendshapes.find((bs: any) => bs.categoryName.includes('eyeLookLeft'));
        const eyeLookRight = blendshapes.find((bs: any) => bs.categoryName.includes('eyeLookRight'));
        
        const lookingAway = (eyeLookDown?.score || 0) + (eyeLookUp?.score || 0) + 
                          (eyeLookLeft?.score || 0) + (eyeLookRight?.score || 0);
        
        if (lookingAway < 0.3) {
          eyeContactCount++;
        }

        // –ê–Ω–∞–ª–∏–∑ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const browShapes = blendshapes.filter((bs: any) => bs.categoryName.includes('brow'));
        const maxBrow = Math.max(...browShapes.map((bs: any) => bs.score), 0);
        if (maxBrow > 0.2) {
          expressiveCount++;
          emotionalVariety.add('expressive');
        }

        // –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–π)
        const totalExpression = maxSmile + maxBrow + lookingAway;
        if (totalExpression > 0.1 && totalExpression < 0.8) {
          authenticityScore += 1; // –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        }
      }
    });

    const frameCount = faceData.length;
    const smileRatio = smileCount / frameCount;
    const eyeContactRatio = eyeContactCount / frameCount;
    const expressivenessRatio = expressiveCount / frameCount;
    const emotionalRangeScore = emotionalVariety.size;
    const authenticityRatio = authenticityScore / frameCount;

    // –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ (–∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ 40 –±–∞–ª–ª–æ–≤)
    const expressivenessScore = Math.min(40, expressivenessRatio * 80);
    const eyeContactScore = eyeContactRatio * 40;
    const smileFrequencyScore = Math.min(40, smileRatio * 60); // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ 60% –≤—Ä–µ–º–µ–Ω–∏
    const emotionalRangeScoreNorm = Math.min(40, emotionalRangeScore * 20);
    const authenticityScoreNorm = authenticityRatio * 40;

    const totalScore = expressivenessScore + eyeContactScore + smileFrequencyScore + 
                      emotionalRangeScoreNorm + authenticityScoreNorm;

    return {
      score: Math.round(totalScore),
      maxScore: 200,
      expressiveness: Math.round(expressivenessScore),
      eyeContact: Math.round(eyeContactScore),
      smileFrequency: Math.round(smileFrequencyScore),
      emotionalRange: Math.round(emotionalRangeScoreNorm),
      authenticity: Math.round(authenticityScoreNorm),
      expressions: Array.from(emotionalVariety),
      recommendations: this.generateFacialRecommendations(smileRatio, eyeContactRatio, totalScore)
    };
  }

  private analyzeSpeechMetrics(audioData: any, videoDuration: number): SpeechMetrics {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    const mockTranscription = audioData?.transcription || this.generateMockTranscription();
    
    const words = mockTranscription.toLowerCase()
      .replace(/[^\w\s]/g, '')
      .split(/\s+/)
      .filter((word: string) => word.length > 0);
    
    const uniqueWords = new Set(words);
    const wordCount = words.length;
    const uniqueWordCount = uniqueWords.size;
    const wordsPerMinute = (wordCount / videoDuration) * 60;

    // –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤
    const fillerWords = ['—ç–º', '–∞—Ö', '–Ω—É', '—Ç–∞–∫', '–∑–Ω–∞—á–∏—Ç', '–∫–æ—Ä–æ—á–µ', '—Ç–∏–ø–∞', '–∫–∞–∫ –±—ã', '–≤–æ—Ç', '—ç—Ç–æ'];
    const fillerCount = words.filter((word: string) => fillerWords.includes(word)).length;
    const fillerRatio = fillerCount / wordCount;

    // –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤–∞—Ä—è
    const avgWordLength = words.reduce((sum: number, word: string) => sum + word.length, 0) / wordCount;
    const vocabularyRichness = uniqueWordCount / wordCount;

    // –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
    const sentences = mockTranscription.split(/[.!?]+/).filter((s: string) => s.trim().length > 0);
    const avgSentenceLength = wordCount / sentences.length;

    // –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ (–∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ 40 –±–∞–ª–ª–æ–≤)
    let clarityScore = 40 - (fillerRatio * 80); // –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã
    let paceScore = 40;
    if (wordsPerMinute < 120) paceScore = (wordsPerMinute / 120) * 40;
    else if (wordsPerMinute > 180) paceScore = 40 - ((wordsPerMinute - 180) / 60) * 20;

    const volumeScore = 35; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞, —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ
    const vocabularyScore = Math.min(40, vocabularyRichness * 80 + avgWordLength * 5);
    const grammarScore = Math.min(40, avgSentenceLength * 3);

    const totalScore = clarityScore + paceScore + volumeScore + vocabularyScore + grammarScore;

    return {
      score: Math.round(Math.max(0, totalScore)),
      maxScore: 200,
      clarity: Math.round(Math.max(0, clarityScore)),
      pace: Math.round(paceScore),
      volume: Math.round(volumeScore),
      vocabulary: Math.round(vocabularyScore),
      grammar: Math.round(grammarScore),
      fillerWords: fillerCount,
      transcription: mockTranscription,
      recommendations: this.generateSpeechRecommendations(fillerRatio, wordsPerMinute, vocabularyRichness, totalScore)
    };
  }

  private analyzeEngagementMetrics(
    poseData: any[], 
    gestureData: any[], 
    faceData: any[], 
    audioData: any, 
    videoDuration: number
  ): EngagementMetrics {
    
    // –ê–Ω–∞–ª–∏–∑ –≤–Ω–∏–º–∞–Ω–∏—è (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ–∑—ã + –∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç)
    let attentionScore = 0;
    if (poseData.length > 0 && faceData.length > 0) {
      const poseStability = this.calculatePoseStability(poseData);
      const eyeContactRatio = this.calculateEyeContactRatio(faceData);
      attentionScore = (poseStability + eyeContactRatio) * 20;
    }

    // –ê–Ω–∞–ª–∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–∂–µ—Å—Ç—ã + –º–∏–º–∏–∫–∞)
    let interactionScore = 0;
    if (gestureData.length > 0 && faceData.length > 0) {
      const gestureActivity = Math.min(1, gestureData.length / (videoDuration * 10));
      const facialActivity = Math.min(1, faceData.length / (videoDuration * 30));
      interactionScore = (gestureActivity + facialActivity) * 20;
    }

    // –ê–Ω–∞–ª–∏–∑ —ç–Ω–µ—Ä–≥–∏–∏ (–¥–∏–Ω–∞–º–∏–∫–∞ —Ä–µ—á–∏ + –¥–≤–∏–∂–µ–Ω–∏—è)
    let energyScore = 30; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    if (audioData && poseData.length > 0) {
      const speechDynamics = this.calculateSpeechDynamics(audioData);
      const movementDynamics = this.calculateMovementDynamics(poseData);
      energyScore = (speechDynamics + movementDynamics) * 20;
    }

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è (–æ–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
    const presenceScore = Math.min(40, (attentionScore + interactionScore + energyScore) / 3);

    // –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∏–∑–º—ã (–∫–æ–º–±–∏–Ω–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤)
    const charismaScore = Math.min(40, (attentionScore + interactionScore + energyScore + presenceScore) / 4);

    const totalScore = attentionScore + interactionScore + energyScore + presenceScore + charismaScore;

    return {
      score: Math.round(totalScore),
      maxScore: 200,
      attention: Math.round(attentionScore),
      interaction: Math.round(interactionScore),
      energy: Math.round(energyScore),
      presence: Math.round(presenceScore),
      charisma: Math.round(charismaScore),
      recommendations: this.generateEngagementRecommendations(totalScore)
    };
  }

  private calculateGrade(percentage: number): string {
    if (percentage >= 90) return 'A+';
    if (percentage >= 85) return 'A';
    if (percentage >= 80) return 'A-';
    if (percentage >= 75) return 'B+';
    if (percentage >= 70) return 'B';
    if (percentage >= 65) return 'B-';
    if (percentage >= 60) return 'C+';
    if (percentage >= 55) return 'C';
    if (percentage >= 50) return 'C-';
    return 'D';
  }

  private generateOverallFeedback(percentage: number, metrics: DetailedMetrics): string {
    if (percentage >= 85) {
      return "–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ! –í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–∞ –≤–æ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è.";
    } else if (percentage >= 70) {
      return "–•–æ—Ä–æ—à–∏–µ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.";
    } else if (percentage >= 55) {
      return "–ë–∞–∑–æ–≤—ã–µ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è.";
    } else {
      return "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ä–∞–∑–≤–∏—Ç–∏–µ–º –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤. –ù–∞—á–Ω–∏—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤: –ø–æ–∑—ã, —Ä–µ—á–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π.";
    }
  }

  private identifyPriorityAreas(metrics: DetailedMetrics): string[] {
    const areas: { name: string; score: number }[] = [
      { name: "–ü–æ–∑–∞ –∏ –æ—Å–∞–Ω–∫–∞", score: metrics.posture.score },
      { name: "–ñ–µ—Å—Ç–∏–∫—É–ª—è—Ü–∏—è", score: metrics.gesticulation.score },
      { name: "–ú–∏–º–∏–∫–∞ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞", score: metrics.facial.score },
      { name: "–†–µ—á—å –∏ –¥–∏–∫—Ü–∏—è", score: metrics.speech.score },
      { name: "–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏", score: metrics.engagement.score }
    ];

    return areas
      .sort((a, b) => a.score - b.score)
      .slice(0, 3)
      .map(area => area.name);
  }

  private identifyStrengths(metrics: DetailedMetrics): string[] {
    const strengths: string[] = [];
    
    if (metrics.posture.score >= 160) strengths.push("–û—Ç–ª–∏—á–Ω–∞—è –æ—Å–∞–Ω–∫–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–∞—è –ø–æ–∑–∞");
    if (metrics.gesticulation.score >= 160) strengths.push("–í—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞—è –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è –∂–µ—Å—Ç–∏–∫—É–ª—è—Ü–∏—è");
    if (metrics.facial.score >= 160) strengths.push("–ñ–∏–≤–∞—è –º–∏–º–∏–∫–∞ –∏ —Ö–æ—Ä–æ—à–∏–π –∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç");
    if (metrics.speech.score >= 160) strengths.push("–ß–µ—Ç–∫–∞—è —Ä–µ—á—å –∏ –±–æ–≥–∞—Ç—ã–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å");
    if (metrics.engagement.score >= 160) strengths.push("–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏");

    return strengths.length > 0 ? strengths : ["–ë–∞–∑–æ–≤—ã–µ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏"];
  }

  private generateImprovementPlan(metrics: DetailedMetrics): string[] {
    const plan: string[] = [];
    
    if (metrics.posture.score < 140) {
      plan.push("–ù–µ–¥–µ–ª—è 1-2: –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Å–∞–Ω–∫–∏ (10 –º–∏–Ω/–¥–µ–Ω—å)");
    }
    if (metrics.speech.score < 140) {
      plan.push("–ù–µ–¥–µ–ª—è 2-3: –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–∏–∫—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ç–µ–º–ø–æ–º —Ä–µ—á–∏ (15 –º–∏–Ω/–¥–µ–Ω—å)");
    }
    if (metrics.gesticulation.score < 140) {
      plan.push("–ù–µ–¥–µ–ª—è 3-4: –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∂–µ—Å—Ç–∏–∫—É–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–µ—Ä–∫–∞–ª–æ–º (10 –º–∏–Ω/–¥–µ–Ω—å)");
    }
    if (metrics.facial.score < 140) {
      plan.push("–ù–µ–¥–µ–ª—è 4-5: –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –º–∏–º–∏–∫–∏ –∏ –∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞");
    }
    if (metrics.engagement.score < 140) {
      plan.push("–ù–µ–¥–µ–ª—è 5-6: –ü—Ä–∞–∫—Ç–∏–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è");
    }

    plan.push("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ: –ó–∞–ø–∏—Å—å –∏ –∞–Ω–∞–ª–∏–∑ 10-–º–∏–Ω—É—Ç–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞");
    
    return plan;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private generatePostureRecommendations(issues: string[], score: number): string[] {
    const recommendations: string[] = [];
    
    if (issues.includes("–ß–∞—Å—Ç—ã–µ –Ω–∞–∫–ª–æ–Ω—ã –≤–ø–µ—Ä–µ–¥")) {
      recommendations.push("–î–µ—Ä–∂–∏—Ç–µ —Å–ø–∏–Ω—É –ø—Ä—è–º–æ, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –Ω–∏—Ç—å, —Ç—è–Ω—É—â—É—é –≤–∞—Å –≤–≤–µ—Ä—Ö");
      recommendations.push("–î–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–∞–Ω–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç");
    }
    if (issues.includes("–ê—Å–∏–º–º–µ—Ç—Ä–∏—è –ø–ª–µ—á")) {
      recommendations.push("–í—ã–ø–æ–ª–Ω—è–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–ª–µ—á");
      recommendations.push("–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–∏–º–º–µ—Ç—Ä–∏—é –≤ –∑–µ—Ä–∫–∞–ª–µ –ø–µ—Ä–µ–¥ —É—Ä–æ–∫–æ–º");
    }
    if (score < 120) {
      recommendations.push("–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Å—Ç–æ—è–Ω–∏–µ —É —Å—Ç–µ–Ω—ã –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Å–∞–Ω–∫–∏");
      recommendations.push("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏—è –π–æ–≥–æ–π –∏–ª–∏ –ø–∏–ª–∞—Ç–µ—Å–æ–º");
    }

    return recommendations;
  }

  private generateGestureRecommendations(variety: number, frequency: number, score: number): string[] {
    const recommendations: string[] = [];
    
    if (variety < 3) {
      recommendations.push("–ò–∑—É—á–∏—Ç–µ –∏ –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–µ –∂–µ—Å—Ç—ã");
      recommendations.push("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –∂–µ—Å—Ç—ã –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è");
    }
    if (frequency < 0.5) {
      recommendations.push("–£–≤–µ–ª–∏—á—å—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∂–µ—Å—Ç–∏–∫—É–ª—è—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–µ–π –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");
    }
    if (frequency > 2) {
      recommendations.push("–£–º–µ–Ω—å—à–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –∂–µ—Å—Ç–æ–≤, –¥–µ–ª–∞–π—Ç–µ –∏—Ö –±–æ–ª–µ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏");
    }
    if (score < 120) {
      recommendations.push("–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∂–µ—Å—Ç–∏–∫—É–ª—è—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–µ—Ä–∫–∞–ª–æ–º");
      recommendations.push("–ò–∑—É—á–∏—Ç–µ —è–∑—ã–∫ —Ç–µ–ª–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π");
    }

    return recommendations;
  }

  private generateFacialRecommendations(smileRatio: number, eyeContactRatio: number, score: number): string[] {
    const recommendations: string[] = [];
    
    if (smileRatio < 0.3) {
      recommendations.push("–ß–∞—â–µ —É–ª—ã–±–∞–π—Ç–µ—Å—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã");
      recommendations.push("–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —É–ª—ã–±–∫—É –ø–µ—Ä–µ–¥ –∑–µ—Ä–∫–∞–ª–æ–º");
    }
    if (eyeContactRatio < 0.6) {
      recommendations.push("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏");
      recommendations.push("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É '–º–∞—è–∫–∞' - —Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö");
    }
    if (score < 120) {
      recommendations.push("–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –ª–∏—Ü–∞");
      recommendations.push("–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–µ–±—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∏–º–∏–∫–∏");
    }

    return recommendations;
  }

  private generateSpeechRecommendations(fillerRatio: number, wpm: number, vocabularyRichness: number, score: number): string[] {
    const recommendations: string[] = [];
    
    if (fillerRatio > 0.05) {
      recommendations.push("–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤");
      recommendations.push("–î–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—ã –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è '—ç–º' –∏ '–∞—Ö'");
    }
    if (wpm < 120) {
      recommendations.push("–£–≤–µ–ª–∏—á—å—Ç–µ —Ç–µ–º–ø —Ä–µ—á–∏ –¥–ª—è –±–æ–ª—å—à–µ–π –¥–∏–Ω–∞–º–∏—á–Ω–æ—Å—Ç–∏");
    }
    if (wpm > 180) {
      recommendations.push("–ó–∞–º–µ–¥–ª–∏—Ç–µ —Ç–µ–º–ø —Ä–µ—á–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è");
    }
    if (vocabularyRichness < 0.6) {
      recommendations.push("–†–∞—Å—à–∏—Ä—è–π—Ç–µ —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å, –∏–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–æ–≤");
    }
    if (score < 120) {
      recommendations.push("–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —á—Ç–µ–Ω–∏–µ –≤—Å–ª—É—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–∏–∫—Ü–∏–∏");
      recommendations.push("–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ—é —Ä–µ—á—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞");
    }

    return recommendations;
  }

  private generateEngagementRecommendations(score: number): string[] {
    const recommendations: string[] = [];
    
    if (score < 120) {
      recommendations.push("–£–≤–µ–ª–∏—á—å—Ç–µ —ç–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥–∞—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞");
      recommendations.push("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
      recommendations.push("–í–∞—Ä—å–∏—Ä—É–π—Ç–µ —Ç–æ–Ω –≥–æ–ª–æ—Å–∞ –∏ —Ç–µ–º–ø —Ä–µ—á–∏");
      recommendations.push("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–≤–∏–∂–µ–Ω–∏–π –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏–∏");
    } else if (score < 160) {
      recommendations.push("–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∞–∫—Ç–∏–∫—É");
      recommendations.push("–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é");
    }

    return recommendations;
  }

  private generateMockTranscription(): string {
    return `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —É—Ä–æ–∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏. –°–µ–≥–æ–¥–Ω—è –º—ã –∏–∑—É—á–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è. 
    –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –≤–∏–¥ ax¬≤ + bx + c = 0, –≥–¥–µ a –Ω–µ —Ä–∞–≤–Ω–æ –Ω—É–ª—é. 
    –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤. 
    –ü–µ—Ä–≤—ã–π –º–µ—Ç–æ–¥ - —ç—Ç–æ —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í—Ç–æ—Ä–æ–π –º–µ—Ç–æ–¥ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Ñ–æ—Ä–º—É–ª—ã. 
    –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∏–º–µ—Ä—ã. –í–æ–∑—å–º–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ x¬≤ - 5x + 6 = 0. 
    –ú—ã –º–æ–∂–µ–º —Ä–∞–∑–ª–æ–∂–∏—Ç—å —ç—Ç–æ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏: (x - 2)(x - 3) = 0. 
    –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, x = 2 –∏–ª–∏ x = 3. –≠—Ç–æ –Ω–∞—à–∏ —Ä–µ—à–µ–Ω–∏—è. 
    –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ—à–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.`;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
  private calculatePoseStability(poseData: any[]): number {
    if (poseData.length < 2) return 0.5;
    
    let totalMovement = 0;
    for (let i = 1; i < poseData.length; i++) {
      const curr = poseData[i].landmarks[0]; // nose
      const prev = poseData[i-1].landmarks[0];
      const movement = Math.sqrt(Math.pow(curr.x - prev.x, 2) + Math.pow(curr.y - prev.y, 2));
      totalMovement += movement;
    }
    
    const avgMovement = totalMovement / (poseData.length - 1);
    return Math.max(0, 1 - (avgMovement * 50)); // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
  }

  private calculateEyeContactRatio(faceData: any[]): number {
    if (faceData.length === 0) return 0;
    
    let eyeContactCount = 0;
    faceData.forEach(frame => {
      if (frame.blendshapes && frame.blendshapes.categories) {
        const blendshapes = frame.blendshapes.categories;
        const lookingAway = blendshapes
          .filter((bs: any) => bs.categoryName.includes('eyeLook'))
          .reduce((sum: number, bs: any) => sum + bs.score, 0);
        
        if (lookingAway < 0.3) eyeContactCount++;
      }
    });
    
    return eyeContactCount / faceData.length;
  }

  private calculateSpeechDynamics(audioData: any): number {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏–∫–∏ —Ä–µ—á–∏
    return 0.7; // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ
  }

  private calculateMovementDynamics(poseData: any[]): number {
    if (poseData.length < 2) return 0.5;
    
    let totalMovement = 0;
    for (let i = 1; i < poseData.length; i++) {
      const curr = poseData[i].landmarks[0];
      const prev = poseData[i-1].landmarks[0];
      const movement = Math.sqrt(Math.pow(curr.x - prev.x, 2) + Math.pow(curr.y - prev.y, 2));
      totalMovement += movement;
    }
    
    const avgMovement = totalMovement / (poseData.length - 1);
    return Math.min(1, avgMovement * 100); // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏
  }
}

export const scoringService = new ScoringService();