import { GoogleGenerativeAI } from '@google/generative-ai';

export interface GeminiAnalysisRequest {
  transcription: string;
  videoAnalysis: any;
  audioAnalysis: any;
  scoringResults: any;
  multilingualData?: any;
  userLanguage: 'ru' | 'kk';
}

export interface GeminiReportResponse {
  professionalReport: {
    executiveSummary: string;
    detailedAnalysis: {
      strengths: string[];
      areasForImprovement: string[];
      keyInsights: string[];
    };
    recommendations: {
      immediate: string[];
      shortTerm: string[];
      longTerm: string[];
    };
    actionPlan: {
      week1: string[];
      week2: string[];
      week3: string[];
      week4: string[];
    };
    multilingualInsights?: {
      languageUsage: string;
      codeSwithingAnalysis: string;
      recommendations: string[];
    };
  };
  enhancedRecommendations: {
    posture: string[];
    gesticulation: string[];
    facial: string[];
    speech: string[];
    engagement: string[];
    multilingual?: string[];
  };
  motivationalMessage: string;
  nextSteps: string[];
}

class GeminiAIService {
  private genAI: GoogleGenerativeAI;
  private model: any;

  constructor() {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('Gemini API key not found in environment variables');
    }
    
    this.genAI = new GoogleGenerativeAI(apiKey);
    this.model = this.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
  }

  /**
   * Generates a comprehensive professional report using Gemini AI
   */
  async generateProfessionalReport(analysisData: GeminiAnalysisRequest): Promise<GeminiReportResponse> {
    try {
      console.log('ü§ñ Starting Gemini AI analysis for professional report...');
      
      const prompt = this.buildComprehensivePrompt(analysisData);
      
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      console.log('‚úÖ Gemini AI analysis completed');
      
      // Parse the structured response
      return this.parseGeminiResponse(text, analysisData.userLanguage);
      
    } catch (error) {
      console.error('‚ùå Gemini AI analysis failed:', error);
      
      // Return fallback response
      return this.generateFallbackReport(analysisData);
    }
  }

  /**
   * Builds a comprehensive prompt for Gemini AI analysis
   */
  private buildComprehensivePrompt(data: GeminiAnalysisRequest): string {
    const isKazakh = data.userLanguage === 'kk';
    
    const basePrompt = isKazakh ? `
–°—ñ–∑ –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞–ª—ã“õ –¥–∞“ì–¥—ã–ª–∞—Ä–¥—ã —Ç–∞–ª–¥–∞–π—Ç—ã–Ω –∂–µ—Ç–µ–∫—à—ñ —Å–∞—Ä–∞–ø—à—ã—Å—ã–∑. –ú“±“ì–∞–ª—ñ–º–Ω—ñ“£ —Å–∞–±–∞“ì—ã–Ω —Ç–æ–ª—ã“õ —Ç–∞–ª–¥–∞–ø, –∫”ô—Å—ñ–±–∏ –µ—Å–µ–ø –∂–∞—Å–∞“£—ã–∑.

–¢–ê–õ–î–ê–£ –î–ï–†–ï–ö–¢–ï–†–Ü:
` : `
–í—ã –≤–µ–¥—É—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —É—Ä–æ–∫ —É—á–∏—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.

–î–ê–ù–ù–´–ï –ê–ù–ê–õ–ò–ó–ê:
`;

    const dataSection = `
–¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø –†–ï–ß–ò:
${data.transcription}

–í–ò–î–ï–û –ê–ù–ê–õ–ò–ó:
- –ü–æ–∑–∞ –∏ –æ—Å–∞–Ω–∫–∞: ${data.scoringResults.metrics.posture.score}/200 –±–∞–ª–ª–æ–≤
- –ñ–µ—Å—Ç–∏–∫—É–ª—è—Ü–∏—è: ${data.scoringResults.metrics.gesticulation.score}/200 –±–∞–ª–ª–æ–≤  
- –ú–∏–º–∏–∫–∞: ${data.scoringResults.metrics.facial.score}/200 –±–∞–ª–ª–æ–≤

–ê–£–î–ò–û –ê–ù–ê–õ–ò–ó:
- –†–µ—á—å: ${data.scoringResults.metrics.speech.score}/200 –±–∞–ª–ª–æ–≤
- –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: ${data.scoringResults.metrics.engagement.score}/200 –±–∞–ª–ª–æ–≤
- –°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å: ${data.audioAnalysis.vocabulary.wordCount} —Å–ª–æ–≤
- –¢–µ–º–ø —Ä–µ—á–∏: ${data.audioAnalysis.vocabulary.speakingRate} —Å–ª–æ–≤/–º–∏–Ω
- –°–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã: ${data.audioAnalysis.vocabulary.fillerWords}

–û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${data.scoringResults.totalScore}/1000 –±–∞–ª–ª–æ–≤ (${data.scoringResults.percentage.toFixed(1)}%)
`;

    const multilingualSection = data.multilingualData ? `
–ú–ù–û–ì–û–Ø–ó–´–ß–ù–´–ô –ê–ù–ê–õ–ò–ó:
- –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —è–∑—ã–∫–æ–≤: ${data.multilingualData.detectedLanguages?.length || 1}
- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤: ${data.multilingualData.languageSwitches || 0}
- –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫: ${data.multilingualData.dominantLanguage || 'ru-RU'}
- –°–º–µ—à–∞–Ω–Ω–∞—è —Ä–µ—á—å: ${data.multilingualData.isMultilingual ? '–î–∞' : '–ù–µ—Ç'}
` : '';

    const instructionsPrompt = isKazakh ? `
–ù“∞–°“ö–ê–£–õ–´“ö:
–ö–µ–ª–µ—Å—ñ —Ñ–æ—Ä–º–∞—Ç—Ç–∞ —Ç–æ–ª—ã“õ –∫”ô—Å—ñ–±–∏ –µ—Å–µ–ø –∂–∞—Å–∞“£—ã–∑:

1. –ê–¢“ö–ê–†–£–®–´ “ö–û–†–´–¢–´–ù–î–´ (2-3 —Å”©–π–ª–µ–º)
2. –¢–û–õ–´“ö –¢–ê–õ–î–ê–£:
   - –ö“Ø—à—Ç—ñ –∂–∞“õ—Ç–∞—Ä—ã (3-5 –Ω“Ø–∫—Ç–µ)
   - –ñ–∞“õ—Å–∞—Ä—Ç—É —Å–∞–ª–∞–ª–∞—Ä—ã (3-5 –Ω“Ø–∫—Ç–µ)  
   - –ù–µ–≥—ñ–∑–≥—ñ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç–µ—Ä (3-4 –Ω“Ø–∫—Ç–µ)
3. “∞–°–´–ù–´–°–¢–ê–†:
   - –î–µ—Ä–µ—É –æ—Ä—ã–Ω–¥–∞–ª–∞—Ç—ã–Ω (2-3 –Ω“Ø–∫—Ç–µ)
   - “ö—ã—Å“õ–∞ –º–µ—Ä–∑—ñ–º–¥—ñ (3-4 –Ω“Ø–∫—Ç–µ)
   - “∞–∑–∞“õ –º–µ—Ä–∑—ñ–º–¥—ñ (2-3 –Ω“Ø–∫—Ç–µ)
4. –Ü–°-“ö–ò–ú–´–õ –ñ–û–°–ü–ê–†–´ (4 –∞–ø—Ç–∞)
5. –ö”®–¢–ï–†–£ –•–ê–ë–ê–†–õ–ê–ú–ê–°–´
6. –ö–ï–õ–ï–°–Ü “ö–ê–î–ê–ú–î–ê–†

–ñ–∞—É–∞–ø—Ç—ã JSON —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –±–µ—Ä—ñ“£—ñ–∑.
` : `
–ò–ù–°–¢–†–£–ö–¶–ò–Ø:
–°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

1. –†–ï–ó–Æ–ú–ï (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:
   - –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã (3-5 –ø—É–Ω–∫—Ç–æ–≤)
   - –û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è (3-5 –ø—É–Ω–∫—Ç–æ–≤)
   - –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã (3-4 –ø—É–Ω–∫—Ç–∞)
3. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
   - –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ (2-3 –ø—É–Ω–∫—Ç–∞)
   - –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ (3-4 –ø—É–Ω–∫—Ç–∞)
   - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ (2-3 –ø—É–Ω–∫—Ç–∞)
4. –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô (4 –Ω–µ–¥–µ–ª–∏)
5. –ú–û–¢–ò–í–ê–¶–ò–û–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
6. –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò

–û—Ç–≤–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.
`;

    return basePrompt + dataSection + multilingualSection + instructionsPrompt;
  }

  /**
   * Parses Gemini AI response into structured format
   */
  private parseGeminiResponse(text: string, language: 'ru' | 'kk'): GeminiReportResponse {
    try {
      // Try to extract JSON from the response
      const jsonMatch = text.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        return this.structureGeminiResponse(parsed, language);
      }
    } catch (error) {
      console.warn('Failed to parse JSON response, using text parsing...');
    }
    
    // Fallback to text parsing
    return this.parseTextResponse(text, language);
  }

  /**
   * Structures the Gemini response into the expected format
   */
  private structureGeminiResponse(parsed: any, language: 'ru' | 'kk'): GeminiReportResponse {
    return {
      professionalReport: {
        executiveSummary: parsed.executiveSummary || parsed.summary || '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        detailedAnalysis: {
          strengths: parsed.strengths || [],
          areasForImprovement: parsed.areasForImprovement || [],
          keyInsights: parsed.keyInsights || []
        },
        recommendations: {
          immediate: parsed.immediateRecommendations || [],
          shortTerm: parsed.shortTermRecommendations || [],
          longTerm: parsed.longTermRecommendations || []
        },
        actionPlan: {
          week1: parsed.week1 || [],
          week2: parsed.week2 || [],
          week3: parsed.week3 || [],
          week4: parsed.week4 || []
        }
      },
      enhancedRecommendations: {
        posture: parsed.postureRecommendations || [],
        gesticulation: parsed.gestureRecommendations || [],
        facial: parsed.facialRecommendations || [],
        speech: parsed.speechRecommendations || [],
        engagement: parsed.engagementRecommendations || []
      },
      motivationalMessage: parsed.motivationalMessage || this.getDefaultMotivationalMessage(language),
      nextSteps: parsed.nextSteps || []
    };
  }

  /**
   * Parses text response when JSON parsing fails
   */
  private parseTextResponse(text: string, language: 'ru' | 'kk'): GeminiReportResponse {
    const sections = text.split(/\n\s*\n/);
    
    return {
      professionalReport: {
        executiveSummary: this.extractSection(text, ['—Ä–µ–∑—é–º–µ', 'summary', '“õ–æ—Ä—ã—Ç—ã–Ω–¥—ã']) || '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω',
        detailedAnalysis: {
          strengths: this.extractListItems(text, ['—Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã', 'strengths', '–∫“Ø—à—Ç—ñ –∂–∞“õ—Ç–∞—Ä—ã']),
          areasForImprovement: this.extractListItems(text, ['–æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è', 'improvement', '–∂–∞“õ—Å–∞—Ä—Ç—É']),
          keyInsights: this.extractListItems(text, ['–∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã', 'insights', '—Ç“Ø—Å—ñ–Ω—ñ–∫—Ç–µ—Ä'])
        },
        recommendations: {
          immediate: this.extractListItems(text, ['–Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ', 'immediate', '–¥–µ—Ä–µ—É']),
          shortTerm: this.extractListItems(text, ['–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ', 'short-term', '“õ—ã—Å“õ–∞ –º–µ—Ä–∑—ñ–º']),
          longTerm: this.extractListItems(text, ['–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ', 'long-term', '“±–∑–∞“õ –º–µ—Ä–∑—ñ–º'])
        },
        actionPlan: {
          week1: this.extractListItems(text, ['–Ω–µ–¥–µ–ª—è 1', 'week 1', '1 –∞–ø—Ç–∞']),
          week2: this.extractListItems(text, ['–Ω–µ–¥–µ–ª—è 2', 'week 2', '2 –∞–ø—Ç–∞']),
          week3: this.extractListItems(text, ['–Ω–µ–¥–µ–ª—è 3', 'week 3', '3 –∞–ø—Ç–∞']),
          week4: this.extractListItems(text, ['–Ω–µ–¥–µ–ª—è 4', 'week 4', '4 –∞–ø—Ç–∞'])
        }
      },
      enhancedRecommendations: {
        posture: this.extractListItems(text, ['–ø–æ–∑–∞', 'posture', '–¥–µ–Ω–µ “õ–∞–ª–ø—ã']),
        gesticulation: this.extractListItems(text, ['–∂–µ—Å—Ç—ã', 'gestures', '“õ–∏–º—ã–ª']),
        facial: this.extractListItems(text, ['–º–∏–º–∏–∫–∞', 'facial', '–º–∏–º–∏–∫–∞']),
        speech: this.extractListItems(text, ['—Ä–µ—á—å', 'speech', '—Å”©–π–ª–µ—É']),
        engagement: this.extractListItems(text, ['–≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å', 'engagement', '—Ç–∞—Ä—Ç—ã–º–¥—ã–ª—ã“õ'])
      },
      motivationalMessage: this.extractSection(text, ['–º–æ—Ç–∏–≤–∞—Ü–∏—è', 'motivation', '–∫”©—Ç–µ—Ä—É']) || this.getDefaultMotivationalMessage(language),
      nextSteps: this.extractListItems(text, ['—Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏', 'next steps', '–∫–µ–ª–µ—Å—ñ “õ–∞–¥–∞–º–¥–∞—Ä'])
    };
  }

  /**
   * Extracts a section from text based on keywords
   */
  private extractSection(text: string, keywords: string[]): string {
    for (const keyword of keywords) {
      const regex = new RegExp(`${keyword}[:\s]*([^\\n]+)`, 'i');
      const match = text.match(regex);
      if (match) {
        return match[1].trim();
      }
    }
    return '';
  }

  /**
   * Extracts list items from text based on keywords
   */
  private extractListItems(text: string, keywords: string[]): string[] {
    const items: string[] = [];
    
    for (const keyword of keywords) {
      const regex = new RegExp(`${keyword}[:\s]*([\\s\\S]*?)(?=\\n\\s*[–ê-–ØA-Z]|$)`, 'i');
      const match = text.match(regex);
      if (match) {
        const section = match[1];
        const listItems = section.match(/[-‚Ä¢*]\s*([^\n]+)/g);
        if (listItems) {
          items.push(...listItems.map(item => item.replace(/[-‚Ä¢*]\s*/, '').trim()));
        }
      }
    }
    
    return items.slice(0, 5); // Limit to 5 items
  }

  /**
   * Gets default motivational message
   */
  private getDefaultMotivationalMessage(language: 'ru' | 'kk'): string {
    return language === 'kk' 
      ? '–°—ñ–∑–¥—ñ“£ –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞–ª—ã“õ –¥–∞“ì–¥—ã–ª–∞—Ä—ã“£—ã–∑ –¥–∞–º—ã–ø –∫–µ–ª–µ–¥—ñ! “Æ–∑–¥—ñ–∫—Å—ñ–∑ –∂–µ—Ç—ñ–ª–¥—ñ—Ä—É –∞—Ä“õ—ã–ª—ã –∂–æ“ì–∞—Ä—ã –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä–≥–µ –∂–µ—Ç–µ—Å—ñ–∑.'
      : '–í–∞—à–∏ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤—ã—Å–æ–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.';
  }

  /**
   * Generates fallback report when Gemini AI fails
   */
  private generateFallbackReport(data: GeminiAnalysisRequest): GeminiReportResponse {
    const isKazakh = data.userLanguage === 'kk';
    
    return {
      professionalReport: {
        executiveSummary: isKazakh 
          ? '–°–∞–±–∞“õ —Ç–∞–ª–¥–∞—É—ã –∞—è“õ—Ç–∞–ª–¥—ã. –ñ–∞–ª–ø—ã –Ω”ô—Ç–∏–∂–µ –∂–∞“õ—Å—ã –¥–µ“£–≥–µ–π–¥–µ.'
          : '–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Ö–æ—Ä–æ—à–µ–º —É—Ä–æ–≤–Ω–µ.',
        detailedAnalysis: {
          strengths: isKazakh ? [
            '–°–∞–±–∞“õ “õ“±—Ä—ã–ª—ã–º—ã –∂–∞“õ—Å—ã “±–π—ã–º–¥–∞—Å—Ç—ã—Ä—ã–ª“ì–∞–Ω',
            '–ú–∞—Ç–µ—Ä–∏–∞–ª–¥—ã —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—É –¥”ô—Ä–µ–∂–µ—Å—ñ –∂–æ“ì–∞—Ä—ã',
            '–°—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–º–µ–Ω ”©–∑–∞—Ä–∞ ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Å—É –±–∞—Ä'
          ] : [
            '–•–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–∫',
            '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
            '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏'
          ],
          areasForImprovement: isKazakh ? [
            '–î–µ–Ω–µ “õ–∞–ª–ø—ã–Ω –∂–∞“õ—Å–∞—Ä—Ç—É “õ–∞–∂–µ—Ç',
            '–°”©–π–ª–µ—É “õ–∞—Ä“õ—ã–Ω—ã–Ω —Ä–µ—Ç—Ç–µ—É',
            '–ö”©–±—ñ—Ä–µ–∫ –∫”©—Ä–Ω–µ–∫—ñ –º–∞—Ç–µ—Ä–∏–∞–ª–¥–∞—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É'
          ] : [
            '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ª—É—á—à–∏—Ç—å –æ—Å–∞–Ω–∫—É',
            '–û—Ç—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º–ø —Ä–µ—á–∏',
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –Ω–∞–≥–ª—è–¥–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤'
          ],
          keyInsights: isKazakh ? [
            '–ö”©–ø —Ç—ñ–ª–¥—ñ “õ–æ–ª–¥–∞–Ω—É —Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–≥–µ –ø–∞–π–¥–∞–ª—ã',
            '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ —ç–ª–µ–º–µ–Ω—Ç—Ç–µ—Ä “õ–æ—Å—É –∫–µ—Ä–µ–∫',
            '–¢“±—Ä–∞“õ—Ç—ã –¥–∞–º—ã—Ç—É –º–∞“£—ã–∑–¥—ã'
          ] : [
            '–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤',
            '–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã',
            '–í–∞–∂–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ'
          ]
        },
        recommendations: {
          immediate: isKazakh ? [
            '–î“±—Ä—ã—Å –æ—Ç—ã—Ä—É –¥–∞“ì–¥—ã—Å—ã–Ω “õ–∞–ª—ã–ø—Ç–∞—Å—Ç—ã—Ä—É',
            '–°”©–∑-–ø–∞—Ä–∞–∑–∏—Ç—Ç–µ—Ä–¥—ñ –∞–∑–∞–π—Ç—É'
          ] : [
            '–†–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Å–∞–Ω–∫–æ–π',
            '–°–æ–∫—Ä–∞—Ç–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤-–ø–∞—Ä–∞–∑–∏—Ç–æ–≤'
          ],
          shortTerm: isKazakh ? [
            '–ñ–µ—Å—Ç–∏–∫—É–ª—è—Ü–∏—è –¥–∞“ì–¥—ã–ª–∞—Ä—ã–Ω –¥–∞–º—ã—Ç—É',
            '–ú–∏–º–∏–∫–∞ –∂–∞—Ç—Ç—ã“ì—É–ª–∞—Ä—ã–Ω –æ—Ä—ã–Ω–¥–∞—É',
            '–î–∞—É—ã—Å –∏–Ω—Ç–æ–Ω–∞—Ü–∏—è—Å—ã–Ω –∂–∞“õ—Å–∞—Ä—Ç—É'
          ] : [
            '–†–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∂–µ—Å—Ç–∏–∫—É–ª—è—Ü–∏–∏',
            '–í—ã–ø–æ–ª–Ω—è—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –º–∏–º–∏–∫–∏',
            '–£–ª—É—á—à–∞—Ç—å –∏–Ω—Ç–æ–Ω–∞—Ü–∏—é –≥–æ–ª–æ—Å–∞'
          ],
          longTerm: isKazakh ? [
            '–ö”ô—Å—ñ–±–∏ –¥–∞–º—ã—Ç—É –∫—É—Ä—Å—Ç–∞—Ä—ã–Ω–∞ “õ–∞—Ç—ã—Å—É',
            '–¢”ô–∂—ñ—Ä–∏–±–µ –∞–ª–º–∞—Å—É –±–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—Ä—ã–Ω–∞ “õ–æ—Å—ã–ª—É'
          ] : [
            '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å–∞—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è',
            '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –æ–±–º–µ–Ω–∞ –æ–ø—ã—Ç–æ–º'
          ]
        },
        actionPlan: {
          week1: isKazakh ? ['–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –¥–µ–Ω–µ “õ–∞–ª–ø—ã–Ω –±–∞“õ—ã–ª–∞—É'] : ['–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –æ—Å–∞–Ω–∫–∏'],
          week2: isKazakh ? ['–ñ–µ—Å—Ç–∏–∫—É–ª—è—Ü–∏—è –∂–∞—Ç—Ç—ã“ì—É–ª–∞—Ä—ã'] : ['–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∂–µ—Å—Ç–∏–∫—É–ª—è—Ü–∏–∏'],
          week3: isKazakh ? ['–ú–∏–º–∏–∫–∞ –¥–∞–º—ã—Ç—É'] : ['–†–∞–∑–≤–∏—Ç–∏–µ –º–∏–º–∏–∫–∏'],
          week4: isKazakh ? ['–ù”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ —Ç–∞–ª–¥–∞—É'] : ['–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤']
        }
      },
      enhancedRecommendations: {
        posture: isKazakh ? ['–ê—Ä“õ–∞–Ω—ã —Ç“Ø–∑—É “±—Å—Ç–∞“£—ã–∑'] : ['–î–µ—Ä–∂–∏—Ç–µ —Å–ø–∏–Ω—É –ø—Ä—è–º–æ'],
        gesticulation: isKazakh ? ['–¢–∞–±–∏“ì–∏ “õ–∏–º—ã–ª–¥–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑'] : ['–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∂–µ—Å—Ç—ã'],
        facial: isKazakh ? ['–ö”©–±—ñ—Ä–µ–∫ –∫“Ø–ª—ñ–º—Å—ñ—Ä–µ“£—ñ–∑'] : ['–ß–∞—â–µ —É–ª—ã–±–∞–π—Ç–µ—Å—å'],
        speech: isKazakh ? ['–ê–Ω—ã“õ —Å”©–π–ª–µ“£—ñ–∑'] : ['–ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ'],
        engagement: isKazakh ? ['–°—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–º–µ–Ω –∫”©–±—ñ—Ä–µ–∫ ”ô—Ä–µ–∫–µ—Ç—Ç–µ—Å—ñ“£—ñ–∑'] : ['–ë–æ–ª—å—à–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏']
      },
      motivationalMessage: this.getDefaultMotivationalMessage(data.userLanguage),
      nextSteps: isKazakh ? [
        '–ñ–æ—Å–ø–∞—Ä–¥—ã –æ—Ä—ã–Ω–¥–∞—É',
        '–ü—Ä–æ–≥—Ä–µ—Å—Å—Ç—ñ –±–∞“õ—ã–ª–∞—É',
        '–ö–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å –∞–ª—É'
      ] : [
        '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞',
        '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
        '–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'
      ]
    };
  }

  /**
   * Generates enhanced recommendations for specific metrics
   */
  async generateEnhancedRecommendations(
    metricType: 'posture' | 'gesticulation' | 'facial' | 'speech' | 'engagement',
    currentScore: number,
    maxScore: number,
    specificData: any,
    language: 'ru' | 'kk'
  ): Promise<string[]> {
    try {
      const prompt = this.buildMetricSpecificPrompt(metricType, currentScore, maxScore, specificData, language);
      
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      // Extract recommendations from response
      const recommendations = this.extractListItems(text, ['—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', 'recommendations', '“±—Å—ã–Ω—ã—Å—Ç–∞—Ä']);
      
      return recommendations.length > 0 ? recommendations : this.getFallbackRecommendations(metricType, language);
      
    } catch (error) {
      console.error('Failed to generate enhanced recommendations:', error);
      return this.getFallbackRecommendations(metricType, language);
    }
  }

  /**
   * Builds metric-specific prompt for detailed recommendations
   */
  private buildMetricSpecificPrompt(
    metricType: string,
    currentScore: number,
    maxScore: number,
    specificData: any,
    language: 'ru' | 'kk'
  ): string {
    const percentage = (currentScore / maxScore) * 100;
    
    const basePrompt = language === 'kk' 
      ? `–°—ñ–∑ –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞–ª—ã“õ –¥–∞“ì–¥—ã–ª–∞—Ä–¥—ã –¥–∞–º—ã—Ç—É –±–æ–π—ã–Ω—à–∞ —Å–∞—Ä–∞–ø—à—ã—Å—ã–∑. ${metricType} –¥–∞“ì–¥—ã—Å—ã “Ø—à—ñ–Ω –Ω–∞“õ—Ç—ã “±—Å—ã–Ω—ã—Å—Ç–∞—Ä –±–µ—Ä—ñ“£—ñ–∑.`
      : `–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤. –î–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–∞–≤—ã–∫–∞ ${metricType}.`;
    
    const dataPrompt = `
–¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${currentScore}/${maxScore} (${percentage.toFixed(1)}%)
–î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(specificData, null, 2)}
`;

    const instructionPrompt = language === 'kk'
      ? '–ù–∞“õ—Ç—ã, –æ—Ä—ã–Ω–¥–∞–ª–∞—Ç—ã–Ω 5-7 “±—Å—ã–Ω—ã—Å –±–µ—Ä—ñ“£—ñ–∑. ”ò—Ä “±—Å—ã–Ω—ã—Å –±—ñ—Ä –∂–æ–ª–¥–∞ –±–æ–ª—É—ã –∫–µ—Ä–µ–∫.'
      : '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ 5-7 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω–∏–º—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ö–∞–∂–¥–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.';

    return basePrompt + dataPrompt + instructionPrompt;
  }

  /**
   * Gets fallback recommendations for specific metrics
   */
  private getFallbackRecommendations(metricType: string, language: 'ru' | 'kk'): string[] {
    const recommendations = {
      posture: {
        ru: [
          '–î–µ—Ä–∂–∏—Ç–µ —Å–ø–∏–Ω—É –ø—Ä—è–º–æ –≤–æ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞',
          '–î–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–∞–Ω–∫–∏',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ä–≥–æ–Ω–æ–º–∏—á–Ω—É—é –º–µ–±–µ–ª—å',
          '–í—ã–ø–æ–ª–Ω—è–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–ø–∏–Ω—ã'
        ],
        kk: [
          '–°–∞–±–∞“õ –∫–µ–∑—ñ–Ω–¥–µ –∞—Ä“õ–∞“£—ã–∑–¥—ã —Ç“Ø–∑—É “±—Å—Ç–∞“£—ã–∑',
          '–î–µ–Ω–µ “õ–∞–ª–ø—ã–Ω —Ç–µ–∫—Å–µ—Ä—É “Ø—à—ñ–Ω “Ø–∑—ñ–ª—ñ—Å –∂–∞—Å–∞“£—ã–∑',
          '–≠—Ä–≥–æ–Ω–æ–º–∏–∫–∞–ª—ã“õ –∂–∏“ª–∞–∑ –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑',
          '–ê—Ä“õ–∞–Ω—ã –Ω—ã“ì–∞–π—Ç–∞—Ç—ã–Ω –∂–∞—Ç—Ç—ã“ì—É–ª–∞—Ä –∂–∞—Å–∞“£—ã–∑'
        ]
      },
      gesticulation: {
        ru: [
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∂–µ—Å—Ç—ã',
          '–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∂–µ—Å—Ç–∏–∫—É–ª—è—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–µ—Ä–∫–∞–ª–æ–º',
          '–ò–∑—É—á–∏—Ç–µ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–µ –∂–µ—Å—Ç—ã',
          '–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–π—Ç–µ –∂–µ—Å—Ç—ã —Å —Ä–µ—á—å—é'
        ],
        kk: [
          '–¢–∞–±–∏“ì–∏ “õ–∏–º—ã–ª–¥–∞—Ä–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑',
          '–ê–π–Ω–∞ –∞–ª–¥—ã–Ω–¥–∞ “õ–∏–º—ã–ª-“õ–æ–∑“ì–∞–ª—ã—Å –∂–∞—Ç—Ç—ã“ì—ã“£—ã–∑',
          '–ü–µ–¥–∞–≥–æ–≥–∏–∫–∞–ª—ã“õ “õ–∏–º—ã–ª–¥–∞—Ä–¥—ã “Ø–π—Ä–µ–Ω—ñ“£—ñ–∑',
          '“ö–∏–º—ã–ª–¥–∞—Ä–¥—ã —Å”©–∑–±–µ–Ω “Ø–π–ª–µ—Å—Ç—ñ—Ä—ñ“£—ñ–∑'
        ]
      },
      facial: {
        ru: [
          '–ß–∞—â–µ —É–ª—ã–±–∞–π—Ç–µ—Å—å –≤–æ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞',
          '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç',
          '–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –ª–∏—Ü–∞',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–º–∏–∫—É –¥–ª—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è'
        ],
        kk: [
          '–°–∞–±–∞“õ –∫–µ–∑—ñ–Ω–¥–µ –∂–∏—ñ –∫“Ø–ª—ñ–º—Å—ñ—Ä–µ“£—ñ–∑',
          '–ö”©–∑ –±–∞–π–ª–∞–Ω—ã—Å—ã–Ω —Å–∞“õ—Ç–∞“£—ã–∑',
          '–ë–µ—Ç ”©—Ä–Ω–µ–≥—ñ–Ω—ñ“£ –∫”©—Ä–Ω–µ–∫—ñ–ª—ñ–≥—ñ–Ω –¥–∞–º—ã—Ç—ã“£—ã–∑',
          '–ë–∞—Å–∞ –∫”©—Ä—Å–µ—Ç—É “Ø—à—ñ–Ω –º–∏–º–∏–∫–∞ –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑'
        ]
      },
      speech: {
        ru: [
          '–ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ',
          '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ç–µ–º–ø —Ä–µ—á–∏',
          '–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã',
          '–†–∞—Å—à–∏—Ä—è–π—Ç–µ —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å'
        ],
        kk: [
          '–ê–Ω—ã“õ –∂”ô–Ω–µ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ —Å”©–π–ª–µ“£—ñ–∑',
          '–°”©–π–ª–µ—É “õ–∞—Ä“õ—ã–Ω—ã–Ω –±–∞“õ—ã–ª–∞“£—ã–∑',
          '–°”©–∑-–ø–∞—Ä–∞–∑–∏—Ç—Ç–µ—Ä–¥—ñ –∞–∑–∞–π—Ç—ã“£—ã–∑',
          '–°”©–∑–¥—ñ–∫ “õ–æ—Ä—ã“£—ã–∑–¥—ã –∫–µ“£–µ–π—Ç—ñ“£—ñ–∑'
        ]
      },
      engagement: {
        ru: [
          '–£–≤–µ–ª–∏—á—å—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã',
          '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —ç–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å',
          '–í–æ–≤–ª–µ–∫–∞–π—Ç–µ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'
        ],
        kk: [
          '–°–∞–±–∞“õ—Ç—ã“£ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ–ª—ñ–≥—ñ–Ω –∞—Ä—Ç—Ç—ã—Ä—ã“£—ã–∑',
          '”ò—Ä—Ç“Ø—Ä–ª—ñ ”ô–¥—ñ—Å—Ç–µ—Ä–¥—ñ –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑',
          '–°–µ—Ä–ø—ñ–Ω–¥—ñ–ª—ñ–∫—Ç—ñ —Å–∞“õ—Ç–∞“£—ã–∑',
          '–ë–∞—Ä–ª—ã“õ —Å—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–¥—ñ —Ç–∞—Ä—Ç—ã“£—ã–∑'
        ]
      }
    };

    return recommendations[metricType as keyof typeof recommendations]?.[language] || [];
  }

  /**
   * Gets service status
   */
  getStatus(): { configured: boolean; model: string; version: string } {
    return {
      configured: !!process.env.GEMINI_API_KEY,
      model: 'gemini-1.5-flash',
      version: '1.5'
    };
  }
}

export const geminiAIService = new GeminiAIService();